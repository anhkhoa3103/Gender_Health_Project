import React, { useState } from 'react';
import '../style/SymptomCheckForm.css'; 

const SYMPTOMS = [
  { key: 'discharge', label: 'Kh√≠ h∆∞ b·∫•t th∆∞·ªùng (m√†u v√†ng/xanh, m√πi h√¥i)' },
  { key: 'itching', label: 'Ng·ª©a ho·∫∑c r√°t v√πng k√≠n' },
  { key: 'painUrination', label: 'Ti·ªÉu bu·ªët ho·∫∑c r√°t khi ƒëi ti·ªÉu' },
  { key: 'painIntercourse', label: 'ƒêau khi quan h·ªá t√¨nh d·ª•c' },
  { key: 'bleeding', label: 'Ch·∫£y m√°u b·∫•t th∆∞·ªùng ngo√†i k·ª≥ kinh' },
  { key: 'sores', label: 'Xu·∫•t hi·ªán m·ª•n ho·∫∑c lo√©t v√πng k√≠n' },
  { key: 'pelvicPain', label: 'ƒêau b·ª•ng d∆∞·ªõi k√©o d√†i ho·∫∑c th∆∞·ªùng xuy√™n' }
];

const diagnosisRules = (symptoms) => {
  const active = Object.entries(symptoms).filter(([_, value]) => value).map(([key]) => key);
  const suggestions = [];

  if (active.includes('discharge') && active.includes('itching')) {
    suggestions.push('üî¥ C√≥ th·ªÉ b·∫°n ƒëang b·ªã vi√™m √¢m ƒë·∫°o ho·∫∑c nhi·ªÖm n·∫•m Candida.');
  }
  if (active.includes('painUrination') && active.includes('pelvicPain')) {
    suggestions.push('üü† C√≥ th·ªÉ l√† vi√™m ƒë∆∞·ªùng ti·∫øt ni·ªáu ho·∫∑c vi√™m v√πng ch·∫≠u.');
  }
  if (active.includes('sores')) {
    suggestions.push('‚ö†Ô∏è C·∫£nh b√°o: C√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa Herpes sinh d·ª•c ho·∫∑c b·ªánh x√£ h·ªôi.');
  }
  if (active.includes('painIntercourse')) {
    suggestions.push('üî∂ C√≥ th·ªÉ b·∫°n g·∫∑p v·∫•n ƒë·ªÅ v·ªÅ n·ªôi ti·∫øt t·ªë ho·∫∑c vi√™m √¢m ƒë·∫°o.');
  }
  if (active.includes('bleeding')) {
    suggestions.push('üî∫ Ch·∫£y m√°u b·∫•t th∆∞·ªùng n√™n ƒë∆∞·ª£c ki·ªÉm tra ngay.');
  }

  if (suggestions.length === 0) {
    return ['‚úÖ Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu b·∫•t th∆∞·ªùng nghi√™m tr·ªçng. Tuy nhi√™n, n·∫øu c√≥ lo l·∫Øng, h√£y tham kh·∫£o √Ω ki·∫øn chuy√™n gia.'];
  }

  return suggestions;
};

const SymptomCheckForm = () => {
  const [symptoms, setSymptoms] = useState({});
  const [results, setResults] = useState(null);

  const toggleSymptom = (key) => {
    setSymptoms((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const handleAnalyze = () => {
    const resultList = diagnosisRules(symptoms);
    setResults(resultList);
  };

  return (
    <div className="symptom-check-form">
      <h3>ü©∫ Ki·ªÉm tra d·∫•u hi·ªáu b·∫•t th∆∞·ªùng</h3>
      <p>H√£y tick v√†o c√°c tri·ªáu ch·ª©ng b·∫°n ƒëang g·∫∑p ph·∫£i:</p>
      <div className="symptom-list">
        {SYMPTOMS.map((symptom) => (
          <label key={symptom.key} className="symptom-item">
            <input
              type="checkbox"
              checked={!!symptoms[symptom.key]}
              onChange={() => toggleSymptom(symptom.key)}
            />
            {symptom.label}
          </label>
        ))}
      </div>

      <button className="analyze-button" onClick={handleAnalyze}>
        üîç Ph√¢n t√≠ch d·∫•u hi·ªáu
      </button>

      {results && (
        <div className="diagnosis-result">
          <h4>K·∫øt qu·∫£ ch·∫©n ƒëo√°n</h4>
          <ul>
            {results.map((r, idx) => (
              <li key={idx}>{r}</li>
            ))}
          </ul>
          <div style={{ marginTop: '1rem' }}>
            üëâ <strong>G·ª£i √Ω:</strong> B·∫°n c√≥ th·ªÉ <a href="/consultation">ƒë·∫∑t l·ªãch t∆∞ v·∫•n</a> ho·∫∑c <a href="/package">x√©t nghi·ªám</a> ƒë·ªÉ x√°c minh k·∫øt qu·∫£.
          </div>
        </div>
      )}
    </div>
  );
};

export default SymptomCheckForm;
