import React from 'react';

const formatDate = (dateStr) => {
    const d = new Date(dateStr);
    return d.toLocaleDateString('vi-VN', { day: '2-digit', month: '2-digit' });
};

const AutoDiagnosis = ({ dayData = {}, cycleDates = [] }) => {
    const sortedDates = [...cycleDates].sort((a, b) => new Date(a) - new Date(b));

    let flowHighDays = 0;
    let painHighDays = 0;
    let moodLowDays = 0;
    let ovulationLikeDays = [];
    let feverDays = [];
    const dischargeAnalysis = [];

    console.log("‚è≥ AutoDiagnosis received:", {
        dayData,
        cycleDates
    });

    sortedDates.forEach((date) => {
        const entry = dayData[date];
        if (!entry) return;

        if (entry.hasPeriod && entry.flowLevel >= 4) flowHighDays++;
        if (entry.hasPeriod && entry.painLevel >= 4) painHighDays++;
        if (entry.moodLevel !== null && entry.moodLevel <= 1) moodLowDays++;

        if (
            entry.temperature >= 36.7 &&
            entry.temperature <= 37.3 &&
            entry.discharge?.toLowerCase().includes("l√≤ng tr·∫Øng tr·ª©ng")
        ) {
            ovulationLikeDays.push(date);
        }

        if (entry.temperature > 37.5) {
            feverDays.push(date);
        }

        // Ph√¢n t√≠ch d·ªãch √¢m ƒë·∫°o
        switch (entry.discharge?.toLowerCase()) {
            case "l√≤ng tr·∫Øng tr·ª©ng":
                dischargeAnalysis.push(`${formatDate(date)}: üí° Giai ƒëo·∫°n r·ª•ng tr·ª©ng ‚Äì r·∫•t d·ªÖ th·ª• thai.`);
                break;
            case "d·∫°ng n∆∞·ªõc":
                dischargeAnalysis.push(`${formatDate(date)}: üîµ C√≥ th·ªÉ ƒëang ·ªü giai ƒëo·∫°n d·ªÖ th·ª• thai.`);
                break;
            case "d·∫°ng s·ªØa":
                dischargeAnalysis.push(`${formatDate(date)}: ‚ÑπÔ∏è D·ªãch √¢m ƒë·∫°o d·∫°ng s·ªØa ‚Äì g·∫ßn giai ƒëo·∫°n r·ª•ng tr·ª©ng.`);
                break;
            case "ƒë·∫∑c t√≠nh":
                dischargeAnalysis.push(`${formatDate(date)}: ‚ö†Ô∏è D·ªãch ƒë·∫∑c ‚Äì c√≥ th·ªÉ ch∆∞a ƒë·∫øn ho·∫∑c v·ª´a qua r·ª•ng tr·ª©ng.`);
                break;
            case "kh√¥":
                dischargeAnalysis.push(`${formatDate(date)}: üîí Kh√¥ng c√≥ d·∫•u hi·ªáu r·ª•ng tr·ª©ng.`);
                break;
            default:
                break;
        }
    });

    const details = [];

    details.push(`üî¥ L∆∞·ª£ng m√°u cao xu·∫•t hi·ªán trong ${flowHighDays} ng√†y.`);
    details.push(`üíî ƒêau b·ª•ng kinh m·ª©c ƒë·ªô cao trong ${painHighDays} ng√†y.`);
    details.push(`üòû T√¢m tr·∫°ng r·∫•t th·∫•p trong ${moodLowDays} ng√†y.`);

    if (ovulationLikeDays.length > 0) {
        const dates = ovulationLikeDays.map(formatDate).join(', ');
        details.push(`üü¢ C√≥ d·∫•u hi·ªáu r·ª•ng tr·ª©ng v√†o: ${dates}`);
    } else {
        details.push(`üü¢ Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu r·ª•ng tr·ª©ng r√µ r√†ng.`);
    }

    if (feverDays.length > 0) {
        const dates = feverDays.map(formatDate).join(', ');
        details.push(`üå°Ô∏è S·ªët nh·∫π ghi nh·∫≠n v√†o: ${dates}`);
    } else {
        details.push(`üå°Ô∏è Kh√¥ng ghi nh·∫≠n s·ªët.`);
    }

    // K·∫øt lu·∫≠n chung
    const issues = [];
    if (flowHighDays >= 3) issues.push('rong kinh');
    if (painHighDays >= 2) issues.push('ƒëau n·∫∑ng');
    if (moodLowDays >= 3) issues.push('t√¢m tr·∫°ng ti√™u c·ª±c');
    if (feverDays.length > 0) issues.push('s·ªët');

    const conclusion =
        issues.length === 0
            ? '‚úÖ Chu k·ª≥ n√†y b√¨nh th∆∞·ªùng, kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu b·∫•t th∆∞·ªùng.'
            : `‚ö†Ô∏è Chu k·ª≥ c√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng: ${issues.join(', ')}.`;

    return (
        <div className="diagnosis-box">
            <h4>ü©∫ Ph√¢n t√≠ch chi ti·∫øt chu k·ª≥</h4>
            <ul>
                {details.map((text, idx) => (
                    <li key={idx}>{text}</li>
                ))}
            </ul>

            <h4 style={{ marginTop: '1rem' }}>üíß Ph√¢n t√≠ch d·ªãch √¢m ƒë·∫°o</h4>
            {dischargeAnalysis.length === 0 ? (
                <p>Kh√¥ng c√≥ d·ªØ li·ªáu d·ªãch √¢m ƒë·∫°o.</p>
            ) : (
                <ul>
                    {dischargeAnalysis.map((line, idx) => (
                        <li key={idx}>{line}</li>
                    ))}
                </ul>
            )}

            <div style={{ marginTop: '1rem', fontWeight: 'bold', color: issues.length === 0 ? '#16a34a' : '#dc2626' }}>
                {conclusion}
            </div>
        </div>
    );
};

export default AutoDiagnosis;
